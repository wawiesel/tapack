!!#### REQUIRED INPUT
!! @ line segment in R^2 <Ls>
!! @ ray in R^2 [Ln]
REAL(KIND_R),INTENT(IN) :: Ls(1:2,1:2)
REAL(KIND_R),INTENT(IN) :: Ln(1:2,1:2)

!!#### REQUIRED OUTPUT
!! @ whether or not intersection occured <INTERSECT>
LOGICAL :: INTERSECT

!!#### OPTIONAL INPUT
!! @ whether to include each of the endpoints <IncludeEnds>
LOGICAL,OPTIONAL,INTENT(IN) :: IncludeEnds(1:2)
REAL(KIND_R),INTENT(IN),OPTIONAL :: tol
!!#### OPTIONAL OUTPUT
!! @ fraction of distance between left and right point on line segment <FRAC_Ls>
!! @ distance to intersection along line [SDIST_Ln]
!! @ point of intersection [P_intersect]
!! @ key describing intersection if INTERSECT is .TRUE. <key>
!!   -n : passing through endpoint <n> resulted in no intersection
!!    0 : clean intersection through the middle
!!   +n : passing through endpoint <n> resulted in an intersection

REAL(KIND_R),OPTIONAL,INTENT(OUT) :: FRAC_Ls
REAL(KIND_R),OPTIONAL,INTENT(OUT) :: SDIST_Ln
REAL(KIND_R),OPTIONAL,INTENT(OUT) :: P_intersect(1:2)
INTEGER    ,OPTIONAL,INTENT(OUT) :: key

!!#### LOCAL VARIABLES
REAL(KIND_R) :: FRAC,SDIST,tol_
REAL(KIND_R) :: Ln_a(1:2,1:2)
LOGICAL     :: IncludeEnds_(1:2)